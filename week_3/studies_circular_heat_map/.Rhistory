}
start <- 2
end <- 10
results <- find_and_store_intervals(start, end)
# Accessing the stored_data for the increment 2
results$stored_data[["2"]]
source("~/.active-rstudio-document")
find_and_store_intervals <- function(start, end) {
stored_data <- list()
for (increment in start:end) {
intervals <- c()
interval_values <- c()
iteration <- start
while (iteration <= end) {
sub_interval <- paste(iteration, iteration + increment - 1, sep = "-")
intervals <- c(intervals, sub_interval)
interval_values <- c(interval_values, iteration)
iteration <- iteration + increment
}
stored_data[[as.character(increment)]] <- interval_values
}
return(stored_data)
}
start <- 2
end <- 10
stored_data <- find_and_store_intervals(start, end)
# Accessing the stored_data for the increment 2
stored_data[["2"]]
stored_data
sub_interval
as.integer(unlist(stored_data[["2"]]))
typeof(as.integer(unlist(stored_data[["2"]])))
typeof(stored_data[["2"]])
sectors = letters[1:10]
circos.par(cell.padding = c(0, 0, 0, 0), track.margin = c(0, 0))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
circos.initialize(sectors, xlim =  cbind(rep(0, 10), runif(10, 0.5, 1.5)))
circos.initialize(sectors, xlim =  cbind(rep(0, 10), runif(10, 0.5, 1.5)))
circos.initialize(sectors, xlim =  cbind(rep(0, 10), runif(10, 0.5, 1.5)))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
install.packages("circlize")
library(circlize)
install.packages("circlize")
install.packages("circlize")
circos.initialize(sectors, xlim =  cbind(rep(0, 10), runif(10, 0.5, 1.5)))
# CHAPTER 2 - CIRCULAR LAYOUT
install.packages("circlize")
library(circlize)
install.packages("circlize")
# CHAPTER 2 - CIRCULAR LAYOUT
install.packages("circlize")
library(circlize)
install.packages("circlize")
library(yaml)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
sectors = letters[1:10]
circos.par(cell.padding = c(0, 0, 0, 0), track.margin = c(0, 0))
install.packages("circlize")
install.packages("circlize")
library(circlize)
circos.par(cell.padding = c(0, 0, 0, 0), track.margin = c(0, 0))
circos.initialize(sectors, xlim =  cbind(rep(0, 10), runif(10, 0.5, 1.5)))
circos.track(ylim = c(0, 1), track.height = mm_h(5),
panel.fun = function(x, y){
circos.lines(c(0, 0 + mm_x(5)), c(0.5, 0.5), col = "blue")
})
circos.track(ylim = c(0, 1), track.height = cm_h(1),
track.margin = c(0, mm_h(2)),
panel.fun = function(x, y){
xcenter = get.cell.meta.data("xcenter")
circos.lines(c(xcenter, xcenter), c(0, cm_y(1)), col = "red")
})
circos.track(ylim = c(0, 1), track.height = cm_h(1),
track.margin = c(0, mm_h(2)),
panel.fun = function(x, y){
xcenter = get.cell.meta.data("xcenter")
circos.lines(c(xcenter, xcenter), c(0, cm_y(1)), col = "red")
})
circos.track(ylim = c(0, 1), track.height = cm_h(1),
track.margin = c(0, mm_h(2)),
panel.fun = function(x, y){
xcenter = get.cell.meta.data("xcenter")
circos.lines(c(xcenter, xcenter), c(0, cm_y(1)), col = "red")
})
circos.track(ylim = c(0, 1), track.height = inch_h((1), track.margin = c(0, mm_h(5)),
track.margin = c(0, mm_h(5)),
panel.fun = function(x, y){
line_length_on_x = cm_x(1*sqrt(2)/2)
line_lenght_on_y = cm_y(1*sqrt(2)/2)
circos.lines(c(0, line_lenght_on_x), c(0, line_lenght_on_y), col = "pink")
}))
circos.track(ylim = c(0, 1), track.height = inch_h(1),
track.margin = c(0, mm_h(5)),
panel.fun = function(x, y) {
line_length_on_x = cm_x(1*sqrt(2)/2)
line_length_on_y = cm_y(1*sqrt(2)/2)
circos.lines(c(0, line_length_on_x), c(0, line_length_on_y), col = "orange")
})
circos.track(ylim = c(0, 1), track.height = inch_h(1),
track.margin = c(0, mm_h(5)),
panel.fun = function(x, y) {
line_length_on_x = cm_x(1*sqrt(2)/2)
line_length_on_y = cm_y(1*sqrt(2)/2)
circos.lines(c(0, line_length_on_x), c(0, line_length_on_y), col = "orange")
})
circos.track(ylim = c(0, 1), track.height = inch_h(1),
track.margin = c(0, mm_h(5)),
panel.fun = function(x, y) {
line_length_on_x = cm_x(1*sqrt(2)/2)
line_length_on_y = cm_y(1*sqrt(2)/2)
circos.lines(c(0, line_length_on_x), c(0, line_length_on_y), col = "orange")
})
circos.info()
circos.track(ylim = c(0, 1))
# 2.9 -> set gaps between tracks
circos.initialize(letters[1:10], xlim = c(0, 1))
circos.track(ylim = c(0, 1))
set_track_gap(mm_h(2)) # 2mm
circos.track(ylim = c(0, 1))
set_track_gap(cm_h(0.5)) # 0.5cm
circos.track(ylim = c(0, 1))
circos.clear()
setwd("~/GitHub/private_repo/i_files/06062022")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("viridis")
library("dplyr")
library("ggplot2")
library("viridis")
data <- read.csv(file = "data0b.csv", header = TRUE, sep = ";", dec = ",")
datab <- read.csv(file = "RT_MxP500.metabolites.info_23052022_forGoezde.csv",
header = TRUE, sep = ";", dec = ",")
View(data)
View(datab)
setwd("~/GitHub/Internship-Files-2023-/week_3/studies_circular_heat_map")
# Load the circlize package
library(circlize)
# Data for the circular heat map
main_groups <- c("Animals", "Fruits", "Colors", "Shapes", "Countries")
sub_groups <- list(
Animals = c("Birds", "Cats", "Dogs"),
Fruits = c("Apples", "Bananas", "Oranges"),
Colors = c("Blue", "Green", "Red"),
Shapes = c("Circles", "Squares", "Triangles"),
Countries = c("Australia", "Brazil", "Canada")
)
# Define the colors for the heat map (you can modify this as needed)
colors <- c("#FFCC00", "#FF9900", "#FF6600", "#FF3300", "#FF0000")
# Create a circular heat map
par(mar = c(1, 1, 1, 1)) # Set margin to leave space for labels
circos.par(cell.padding = c(0.02, 0.1)) # Set cell padding for the plot
circos.initialize(factors = main_groups, xlim = c(0, 1))
# Loop through main groups and draw sub-groups
for (i in 1:length(main_groups)) {
circos.trackPlotRegion(factors = sub_groups[[i]], bg.col = colors[i])
}
# Load the circlize package
library(circlize)
# Data for the circular heat map
main_groups <- c("Animals", "Fruits", "Colors", "Shapes", "Countries")
sub_groups <- list(
Animals = c("Birds", "Cats", "Dogs"),
Fruits = c("Apples", "Bananas", "Oranges"),
Colors = c("Blue", "Green", "Red"),
Shapes = c("Circles", "Squares", "Triangles"),
Countries = c("Australia", "Brazil", "Canada")
)
# Define the colors for the heat map (you can modify this as needed)
colors <- c("#FFCC00", "#FF9900", "#FF6600", "#FF3300", "#FF0000")
# Create a circular heat map
par(mar = c(1, 1, 1, 1)) # Set margin to leave space for labels
circos.par(cell.padding = c(0.02, 0.1)) # Set cell padding for the plot
circos.initialize(factors = main_groups, xlim = c(0, 1))
# Loop through main groups and draw sub-groups
for (i in 1:length(main_groups)) {
circos.trackPlotRegion(factors = sub_groups[[i]], bg.col = colors[i])
}
# Load the circlize package
library(circlize)
# Data for the circular heat map
main_groups <- c("Animals", "Fruits", "Colors", "Shapes", "Countries")
sub_groups <- list(
Animals = c("Birds", "Cats", "Dogs"),
Fruits = c("Apples", "Bananas", "Oranges"),
Colors = c("Blue", "Green", "Red"),
Shapes = c("Circles", "Squares", "Triangles"),
Countries = c("Australia", "Brazil", "Canada")
)
# Define the colors for the heat map (you can modify this as needed)
colors <- c("#FFCC00", "#FF9900", "#FF6600", "#FF3300", "#FF0000")
# Set up the circular layout with sectors for main groups
circos.par(start.degree = 90)
# Create a circular heat map
par(mar = c(1, 1, 1, 1)) # Set margin to leave space for labels
# Loop through main groups and set up the sectors
for (i in 1:length(main_groups)) {
circos.track(ylim = c(0, 1), sector.index = i, bg.border = NA)
}
# Load the circlize package
library(circlize)
# Data for the circular heat map
main_groups <- c("Animals", "Fruits", "Colors", "Shapes", "Countries")
sub_groups <- list(
Animals = c("Birds", "Cats", "Dogs"),
Fruits = c("Apples", "Bananas", "Oranges"),
Colors = c("Blue", "Green", "Red"),
Shapes = c("Circles", "Squares", "Triangles"),
Countries = c("Australia", "Brazil", "Canada")
)
# Define the colors for the heat map (you can modify this as needed)
colors <- c("#FFCC00", "#FF9900", "#FF6600", "#FF3300", "#FF0000")
# Set up the circular layout with sectors for main groups
circos.par(start.degree = 90)
# Create a circular heat map
par(mar = c(1, 1, 1, 1)) # Set margin to leave space for labels
# Loop through main groups and set up the sectors
for (i in 1:length(main_groups)) {
circos.track(ylim = c(0, 1), sector.index = i, bg.border = NA)
}
# Data for the circular heat map
main_groups <- c("Animals", "Fruits", "Colors", "Shapes", "Countries")
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
{
fileExt <- function(x) {
db <- grepl("\\.[^.]+\\.(gz|bz2|xz)$", x)
ans <- sub(".*\\.", "", x)
ans[db] <- sub(".*\\.([^.]+\\.)(gz|bz2|xz)$", "\\1\\2",
x[db])
ans
}
my_read_table <- function(...) {
lcc <- Sys.getlocale("LC_COLLATE")
on.exit(Sys.setlocale("LC_COLLATE", lcc))
Sys.setlocale("LC_COLLATE", "C")
read.table(...)
}
stopifnot(is.character(list))
names <- c(as.character(substitute(list(...))[-1L]), list)
if (!is.null(package)) {
if (!is.character(package))
stop("'package' must be a character vector or NULL")
}
paths <- find.package(package, lib.loc, verbose = verbose)
if (is.null(lib.loc))
paths <- c(path.package(package, TRUE), if (!length(package)) getwd(),
paths)
paths <- unique(normalizePath(paths[file.exists(paths)]))
paths <- paths[dir.exists(file.path(paths, "data"))]
dataExts <- tools:::.make_file_exts("data")
if (length(names) == 0L) {
db <- matrix(character(), nrow = 0L, ncol = 4L)
for (path in paths) {
entries <- NULL
packageName <- if (file_test("-f", file.path(path,
"DESCRIPTION")))
basename(path)
else "."
if (file_test("-f", INDEX <- file.path(path, "Meta",
"data.rds"))) {
entries <- readRDS(INDEX)
}
else {
dataDir <- file.path(path, "data")
entries <- tools::list_files_with_type(dataDir,
"data")
if (length(entries)) {
entries <- unique(tools::file_path_sans_ext(basename(entries)))
entries <- cbind(entries, "")
}
}
if (NROW(entries)) {
if (is.matrix(entries) && ncol(entries) == 2L)
db <- rbind(db, cbind(packageName, dirname(path),
entries))
else warning(gettextf("data index for package %s is invalid and will be ignored",
sQuote(packageName)), domain = NA, call. = FALSE)
}
}
colnames(db) <- c("Package", "LibPath", "Item", "Title")
footer <- if (missing(package))
paste0("Use ", sQuote(paste("data(package =", ".packages(all.available = TRUE))")),
"\n", "to list the data sets in all *available* packages.")
else NULL
y <- list(title = "Data sets", header = NULL, results = db,
footer = footer)
class(y) <- "packageIQR"
return(y)
}
paths <- file.path(paths, "data")
for (name in names) {
found <- FALSE
for (p in paths) {
tmp_env <- if (overwrite)
envir
else new.env()
if (file_test("-f", file.path(p, "Rdata.rds"))) {
rds <- readRDS(file.path(p, "Rdata.rds"))
if (name %in% names(rds)) {
found <- TRUE
if (verbose)
message(sprintf("name=%s:\t found in Rdata.rds",
name), domain = NA)
thispkg <- sub(".*/([^/]*)/data$", "\\1",
p)
thispkg <- sub("_.*$", "", thispkg)
thispkg <- paste0("package:", thispkg)
objs <- rds[[name]]
lazyLoad(file.path(p, "Rdata"), envir = tmp_env,
filter = function(x) x %in% objs)
break
}
else if (verbose)
message(sprintf("name=%s:\t NOT found in names() of Rdata.rds, i.e.,\n\t%s\n",
name, paste(names(rds), collapse = ",")),
domain = NA)
}
if (file_test("-f", file.path(p, "Rdata.zip"))) {
warning("zipped data found for package ", sQuote(basename(dirname(p))),
".\nThat is defunct, so please re-install the package.",
domain = NA)
if (file_test("-f", fp <- file.path(p, "filelist")))
files <- file.path(p, scan(fp, what = "",
quiet = TRUE))
else {
warning(gettextf("file 'filelist' is missing for directory %s",
sQuote(p)), domain = NA)
next
}
}
else {
files <- list.files(p, full.names = TRUE)
}
files <- files[grep(name, files, fixed = TRUE)]
if (length(files) > 1L) {
o <- match(fileExt(files), dataExts, nomatch = 100L)
paths0 <- dirname(files)
paths0 <- factor(paths0, levels = unique(paths0))
files <- files[order(paths0, o)]
}
if (length(files)) {
for (file in files) {
if (verbose)
message("name=", name, ":\t file= ...",
.Platform$file.sep, basename(file), "::\t",
appendLF = FALSE, domain = NA)
ext <- fileExt(file)
if (basename(file) != paste0(name, ".", ext))
found <- FALSE
else {
found <- TRUE
zfile <- file
zipname <- file.path(dirname(file), "Rdata.zip")
if (file.exists(zipname)) {
Rdatadir <- tempfile("Rdata")
dir.create(Rdatadir, showWarnings = FALSE)
topic <- basename(file)
rc <- .External(C_unzip, zipname, topic,
Rdatadir, FALSE, TRUE, FALSE, FALSE)
if (rc == 0L)
zfile <- file.path(Rdatadir, topic)
}
if (zfile != file)
on.exit(unlink(zfile))
switch(ext, R = , r = {
library("utils")
sys.source(zfile, chdir = TRUE, envir = tmp_env)
}, RData = , rdata = , rda = load(zfile,
envir = tmp_env), TXT = , txt = , tab = ,
tab.gz = , tab.bz2 = , tab.xz = , txt.gz = ,
txt.bz2 = , txt.xz = assign(name, my_read_table(zfile,
header = TRUE, as.is = FALSE), envir = tmp_env),
CSV = , csv = , csv.gz = , csv.bz2 = ,
csv.xz = assign(name, my_read_table(zfile,
header = TRUE, sep = ";", as.is = FALSE),
envir = tmp_env), found <- FALSE)
}
if (found)
break
}
if (verbose)
message(if (!found)
"*NOT* ", "found", domain = NA)
}
if (found)
break
}
if (!found) {
warning(gettextf("data set %s not found", sQuote(name)),
domain = NA)
}
else if (!overwrite) {
for (o in ls(envir = tmp_env, all.names = TRUE)) {
if (exists(o, envir = envir, inherits = FALSE))
warning(gettextf("an object named %s already exists and will not be overwritten",
sQuote(o)))
else assign(o, get(o, envir = tmp_env, inherits = FALSE),
envir = envir)
}
rm(tmp_env)
}
}
invisible(names)
}
# Load the circlize package
library(circlize)
# Data for the circular heat map
main_groups <- c("Animals", "Fruits", "Colors", "Shapes", "Countries")
sub_groups <- list(
Animals = c("Birds", "Cats", "Dogs"),
Fruits = c("Apples", "Bananas", "Oranges"),
Colors = c("Blue", "Green", "Red"),
Shapes = c("Circles", "Squares", "Triangles"),
Countries = c("Australia", "Brazil", "Canada")
)
# Define the colors for the heat map (you can modify this as needed)
colors <- c("#FFCC00", "#FF9900", "#FF6600", "#FF3300", "#FF0000")
# Set up the circular layout with sectors for main groups
circos.par(start.degree = 90)
# Data for the circular heat map
main_groups <- c("Animals", "Fruits", "Colors", "Shapes", "Countries")
sub_groups <- list(
Animals = c("Birds", "Cats", "Dogs"),
Fruits = c("Apples", "Bananas", "Oranges"),
Colors = c("Blue", "Green", "Red"),
Shapes = c("Circles", "Squares", "Triangles"),
Countries = c("Australia", "Brazil", "Canada")
)
# Define the colors for the heat map (you can modify this as needed)
colors <- c("#FFCC00", "#FF9900", "#FF6600", "#FF3300", "#FF0000")
# Set up the circular layout with sectors for main groups
circos.par(start.degree = 90)
# Create a circular heat map
par(mar = c(1, 1, 1, 1)) # Set margin to leave space for labels
# Loop through main groups and set up the sectors
for (i in 1:length(main_groups)) {
circos.track(ylim = c(0, 1), sector.index = i, bg.border = NA)
}
# Load the circlize package
library(circlize)
# Data for the circular heat map
main_groups <- c("Animals", "Fruits", "Colors", "Shapes", "Countries")
sub_groups <- list(
Animals = c("Birds", "Cats", "Dogs"),
Fruits = c("Apples", "Bananas", "Oranges"),
Colors = c("Blue", "Green", "Red"),
Shapes = c("Circles", "Squares", "Triangles"),
Countries = c("Australia", "Brazil", "Canada")
)
# Define the colors for the heat map (you can modify this as needed)
colors <- c("#FFCC00", "#FF9900", "#FF6600", "#FF3300", "#FF0000")
# Set up the circular layout with sectors for main groups
circos.par(start.degree = 90)
# Create a circular heat map
par(mar = c(1, 1, 1, 1)) # Set margin to leave space for labels
circos.initialize(factors = main_groups, xlim = c(0, 1))
# Loop through main groups and draw sub-groups
for (i in 1:length(main_groups)) {
circos.trackPlotRegion(ylim = c(0, 1), factors = sub_groups[[main_groups[i]]],
bg.col = colors[i])
}
# Data for the circular heat map
main_groups <- c("Animals", "Fruits", "Colors", "Shapes", "Countries")
sub_groups <- list(
Animals = c("Birds", "Cats", "Dogs"),
Fruits = c("Apples", "Bananas", "Oranges"),
Colors = c("Blue", "Green", "Red"),
Shapes = c("Circles", "Squares", "Triangles"),
Countries = c("Australia", "Brazil", "Canada")
)
# Define the colors for the heat map (you can modify this as needed)
colors <- c("#FFCC00", "#FF9900", "#FF6600", "#FF3300", "#FF0000")
# Set up the circular layout with sectors for main groups
circos.par(start.degree = 90)
# Create a circular heat map
par(mar = c(1, 1, 1, 1)) # Set margin to leave space for labels
circos.initialize(factors = main_groups, xlim = c(0, 1))
# Loop through main groups and draw sub-groups
for (i in 1:length(main_groups)) {
circos.trackPlotRegion(ylim = c(0, 1), factors = sub_groups[[main_groups[i]]],
bg.col = colors[i])
}
# Create a circular heat map
par(mar = c(1, 1, 1, 1)) # Set margin to leave space for labels
# Data for the circular heat map
main_groups <- c("Animals", "Fruits", "Colors", "Shapes", "Countries")
# Define the colors for the heat map (you can modify this as needed)
colors <- c("#FFCC00", "#FF9900", "#FF6600", "#FF3300", "#FF0000")
sub_groups <- list(
Animals = c("Birds", "Cats", "Dogs"),
Fruits = c("Apples", "Bananas", "Oranges"),
Colors = c("Blue", "Green", "Red"),
Shapes = c("Circles", "Squares", "Triangles"),
Countries = c("Australia", "Brazil", "Canada")
)
# Set up the circular layout with sectors for main groups
circos.par(start.degree = 90)
# Loop through main groups and set up the tracks
for (i in 1:length(main_groups)) {
circos.track(ylim = c(0, 1), factors = sub_groups[[main_groups[i]]],
bg.col = colors[i])
# Draw the heat map segments within each track
circos.trackPlotRegion(factors = sub_groups[[main_groups[i]]],
bg.col = colors[i])
}
circos.initialize(factors = main_groups, xlim = c(0, 1))
