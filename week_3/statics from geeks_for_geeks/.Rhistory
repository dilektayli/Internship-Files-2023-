main ="GeeksforGeeks-Article chart")
B <- c("Jan", "feb", "Mar", "Apr", "May", "Jun")
# Plot the bar chart
barplot(A, names.arg = B, xlab ="Month",
ylab ="Articles", col ="pink",
main ="GeeksforGeeks-Article chart")
# Bar Charts
A <- c(17, 32, 8, 53, 1, 13)
B <- c("Jan", "feb", "Mar", "Apr", "May", "Jun")
# Plot the bar chart
barplot(A, names.arg = B, xlab ="Month",
ylab ="Articles", col ="pink",
main ="GeeksforGeeks-Article chart")
# Plot the bar chart
barplot(A, names.arg = B, xlab ="Month",
ylab ="Articles", col ="pink",
main ="Bart")
# example 1
colors = c("green", "orange", "brown")
months <- c("Mar", "Apr", "May", "Jun", "Jul")
regions <- c("East", "West", "North")
# Create the matrix of the values.
Values <- matrix(c(2, 9, 3, 11, 9, 4, 8, 7, 3, 12, 5, 2, 8, 10, 11),
nrow = 3, ncol = 5, byrow = TRUE)
# Create the bar chart
barplot(Values, main = "Total Revenue", names.arg = months,
xlab = "Month", ylab = "Revenue",
col = colors, beside = TRUE)
# Add the legend to the chart
legend("topleft", regions, cex = 0.7, fill = colors)
Values
barplot(Values, main = "Total Revenue", names.arg = months,
xlab = "Month", ylab = "Revenue",
col = colors)
# Add the legend to the chart
legend("topleft", regions, cex = 0.7, fill = colors)
# Histograms
v <- c(19, 23, 11, 5, 16, 21, 32, 14, 19, 27, 39)
hist(v, xlab = "Articles", col = "red", border = "blue")
hist(v, xlab = "Articles", col = "red", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 5)
hist(v, xlab = "Articles", col = "red", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
hist(v, xlab = "Articles", col = "red", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 100), ylim = c(0, 5), breaks = 10)
50
hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 50), ylim = c(0, 50), breaks = 10)
hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
m <- hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
m <- hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
text(m$mids, m$counts, labels = m$counts, adj = c(0.5, -.5))
m <- hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
text(m$mids, m$counts, labels = m$counts, adj = c(0.5, -.5))
# histogram using non-uniform width
v <- c(19, 23, 11, 5, 16, 21, 32, 14, 19, 27, 39, 120, 40, 70, 90)
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(50, 100),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(20, 100),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(200, 100),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(20, 100),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(20, 10),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
0
20, 100
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(20, 100),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(20, 10),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(200, 100),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
# histogram using non-uniform width
v <- c(19, 23, 11, 5, 16, 21, 32, 14, 19, 27, 39, 120, 40, 70, 90)
# Creating the histogram.
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(50, 100),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
# Scatter Plots
input <- mtcars[, c("wt", "mpg")]
print(head(input))
plot(x = input$wt, y = input$mpg, xlab = "weight", ylab = "milage", xlim = c(1.5, 4), ylim = c(10, 25), main = "Weight vs Milage" )
# example 1
# 4 variables giving 12 plots
pairs(~wt + mpg + disp + cyl, data = mtcars, main = "Scatter plot matrix")
pairs(~wt + mpg + disp + cyl, data = mtcars, main = "Scatter plot matrix")
# example 1
# 4 variables giving 12 plots
pairs(~wt + mpg + disp + cyl, data = mtcars,
main = "Scatterplot Matrix")
pairs(~wt + mpg + disp + cyl, data = mtcars,
main = "Scatterplot Matrix")
# example 2 - scatter plot with fitted values
install.packages("ggplot2")
library(ggplot2)
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear)))
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear)))
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 1)
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 1)
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 1)
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 1)
# example 2 - scatter plot with fitted values
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 1)
# example 2 - scatter plot with fitted values
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 1)
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 3)
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 1)
# example 3 - adding title with dynamic name
new_graph <- ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 1)
new_graph + labs(
title = "Relation btw Mile per hours and drat",
subtitle = "Relationship break down by gear class"
)
new_graph + labs(
title = "Relation btw Mile per hours and drat",
subtitle = "Relationship break down by gear class",
caption = "hee"
)
new_graph + labs(
title = "Relation btw Mile per hours and drat",
subtitle = "Relationship break down by gear class",
caption = "some caption"
)
# example 4 - 3D scatterplots
install.packages("plotly")
library(plotly)
attach(mtcars)
plot_ly(data = mtcars, x = ~mpg, y = ~hp, z = ~cyl, color = ~gear)
# Pie chart
values <- c(34,54, 22, 25)
labels <- c("A", "B", "C", "D")
pie(values, labels )
# Pie chart
values <- c(34,54, 22, 25)
labels <- c("A", "B", "C", "D")
pie(values, labels )
# Pie chart
values <- c(34,54, 22, 25)
labels <- c("A", "B", "C", "D")
pie(values, labels )
pie(values, labels, main = "Letter pie chart" )
pie(values, labels, main = "Letter pie chart", col = rainbow(length(values))
pie(values, labels, main = "Letter pie chart", col = rainbow(length(values)))
pie(values, labels, main = "Letter pie chart", col = rainbow(length(values)))
# example 1
pie_percent <- round(100*values / sum(values), 1)
?round
pie_percent
# example 1
pie_percent <- round(100*values / sum(values), 1)
pie_percent
# example 1
pie_percent <- round(100*values / sum(values), 3)
pie_percent
# example 1
pie_percent <- round(100*values / sum(values), digits = 1)
legend("topleft", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
pie(values, labels, main = "Letter pie chart", col = rainbow(length(values)))
legend("topleft", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
legend("toprigth", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
legend("topright", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
# example 1
pie_percent <- round(100*values / sum(values), digits = 1)
pie(values, labels, main = "Letter pie chart", col = rainbow(length(values)))
legend("topleft", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
# example 2 - add pie chart color palettes
install.packages("RColorBrewer")
library(RColorBrewer)
labels <- brewer.pal(length(values),"set2")
labels_2 <- c("A", "B", "C", "D")
labels <- brewer.pal(length(values),"set2")
labels <- brewer.pal(length(values),"Set2")
pie(values, labels = labels_2)
# example 3 - modify the line type of the borders of the plot with lty argument
pie(values, labels = labels_2, col = color, lty = 2)
# example 3 - modify the line type of the borders of the plot with lty argument
pie(values, labels = labels_2, lty = 2)
# example 4 - add shading lines with the density argument
pie(values, labels = labels_2, density = 70, angle = 45<
)
# example 4 - add shading lines with the density argument
pie(values, labels = labels_2, density = 70, angle = 45)
# example 4 - add shading lines with the density argument
pie(values, labels = labels_2, density = 70, angle = 45)
# example 4 - add shading lines with the density argument
pie(values, labels = labels_2, col = rainbow(length(values)), density = 60, angle = 45)
# example 4 - add shading lines with the density argument
pie(values, labels = labels_2, col = rainbow(length(values)), density = 60, angle = 45)
# example 5 - 3D pie chart
install.packages("plotrix")
library(plotrix)
pie3D(values, labels = pie_percent, col = rainbow(length(values)))
pie3D(values, labels = pie_percent, col = rainbow(length(values)))
legend("topleft", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
legend("toprigth", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
legend("topright", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
pie3D(values, labels = pie_percent, col = rainbow(length(values)))
legend("topright", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
# Box plots
input <- mtcars[, c("mpg","cyl")]
input
data(mtcars)
boxplot(disp ~gear, data= mtcars, main = "displacement by gear", xlab = "gear", ylab = "displacement")
# example 1 - boxplot using notch
my_colors <- c("#FFA500", "#008000", "#1E90FF", "#FF1493")
boxplot(disp ~ gear, data = mtcars,
main = "Displacement by Gear", xlab = "Gear", ylab = "Displacement",
col = my_colors, border = "black", notch = TRUE, notchwidth = 0.5,
medcol = "white", whiskcol = "black", boxwex = 0.5, outpch = 19,
outcol = "black")
legend("topright", legend = unique(mtcars$gear),
fill = my_colors, border = "black", title = "Gear")
# example 2 - multiple boxplot
variables <- c("mpg", "disp", "hp", "wt")
par(mfrow = c(1, length(variables)))
for (var in variables) {
boxplot(get(var) ~ gear, data = mtcars,
main = paste("Box Plot of", var),
xlab = "Gear",
ylab = var,
col = "skyblue",
border = "black",
notch = TRUE,
notchwidth = 0.5,
medcol = "white",
whiskcol = "black",
boxwex = 0.5,
outpch = 19,
outcol = "black")
}
# example 2 - multiple boxplot
variables <- c("mpg", "disp", "hp", "wt")
par(mfrow = c(1, length(variables)))
for (var in variables) {
boxplot(get(var) ~ gear, data = mtcars,
main = paste("Box Plot of", var),
xlab = "Gear",
ylab = var,
col = "skyblue",
border = "black",
notch = TRUE,
notchwidth = 0.5,
medcol = "white",
whiskcol = "black",
boxwex = 0.5,
outpch = 19,
outcol = "black")
}
setwd("~/GitHub/Internship-Files-2023-/week_3")
setwd("~/GitHub/Internship-Files-2023-/week_3/statics from geeks_for_geeks")
# example 1
x <- seq(-15, 15, by = 0.1)
y <- dnorm(x, mean(x), sd(x))
png(file = "dnorm_example.png")
plot(x, y)
plot(x, y)
dev.off()
x <- seq(-15, 15, by = 0.1)
y <- dnorm(x, mean(x), sd(x))
png(file = "dnorm_example.png")
plot(x, y)
dev.off()
# example 1
x <- seq(-15, 15, by = 0.1)
y <- dnorm(x, mean(x), sd(x))
png(file = "dnorm_example.png")
plot(x, y)
dev.off()
plot(x)
y
plot(x, y)
# example 2
# pnorm() -> cumulative distribution function which measures the probability that a random number X takes a value less than or equal to x.
x <- seq(-15, 15, by = 0.1)
y <- dnorm(x, mean(x), sd(x))
plot(x, y)
# example 2
# pnorm() -> cumulative distribution function which measures the probability that a random number X takes a value less than or equal to x.
x <- seq(-15, 15, by = 0.1)
y <- dnorm(x, mean(x), sd(x))
plot(x, y)
# example 2
# pnorm() -> cumulative distribution function which measures the probability that a random number X takes a value less than or equal to x.
x <- seq(-10, 10, by = 0.1)
y <- dnorm(x, mean = 2.5, sd = 2)
plot(x, y)
# example 2
# pnorm() -> cumulative distribution function which measures the probability that a random number X takes a value less than or equal to x.
x <- seq(-10, 10, by = 0.1)
y <- pnorm(x, mean = 2.5, sd = 2)
plot(x, y)
# example 3
# qnorm() -> inverse of pnorm() function. Useful in finding the percentiles of normal distribution
x <- seq(0, 1, by = 0.02)
y <- qnorm(x, mean(x), sd(x))
plot(x, y)
# example 4
# rnorm() -> used to generate a vector of random numbers which are normally distributed.
x <- rnorm(10000, mean = 90, sd = 5)
hist(x, breaks = 50)
setwd("~/GitHub/Internship-Files-2023-/week_3/statics from geeks_for_geeks/discrete_distributions")
install.packages(Rlab)
install.packages("Rlab")
library(Rlab)
x <- seq(0, 10, by = 1)
y <- dbern(x, prob = 0.7)
plot(y, type = "o")
# example 2
# pbern()
x <- seq(0, 10, by = 1)
y <- pbern(x, prob = 0.7)
plot(y, type = "o")
# example 3
# qbern() -> quantile function for Bernoulli distribution
x <- seq(0, 10, by = 1)
# example 3
# qbern() -> quantile function for Bernoulli distribution
x <- seq(0, 1, by = 0.2)
y <- qbern(x, prob = 0.5, lower.tail = T, log.p = F)
plot(y, type = "o")
# example 4
# rbern() -> to generate a vector of random numbers which are Bernoulli distributed
set.seed(98999)
N <- 1000
random_values <- rbern(N, prob = 0.5)
random_values
hist(random_values, breaks = 10, main = "")
# example 1
dbinom(3, size = 13, prob = 1/6)
probabilities <- dbinom(x = c(0:10), size = 10, prob = 1/data.frame(x, probs))
probabilities <- dbinom(x = c(0:10), size = 10, prob = 1 / 6)
data.frame(x, probs)
plot(0:10, probabilities, type = "l")
probabilities <- dbinom(x = c(0:10), size = 10, prob = 1 / 6)
plot(0:10, probabilities, type = "l")
# example 2
pbinom(3, size = 13, prob = 1/6)
plot(0:10, pbinom(0:10, size = 10, prob = 1/6), type = "l")
# example 3
# qbinom() -> used to find the nth quantile
qbinom(0.841, size = 13, prob = 1/6)
x <- seq(0, 1, by = 0.1)
y <- qbinom(x, size = 13, prob  =1/6)
plot(x, y, type = "l")
# example 4
# rbinom() -> generates n random variables of a particular probability
rbinom(8, size= 13, prob = 1/6)
hist(rbinom(8, size = 13, prob = 1/6))
# rbinom() -> generates n random variables of a particular probability
rbinom(8, size= 13, prob = 1/6)
hist(rbinom(8, size = 13, prob = 1/6))
# example 1
# dhyper() -> to get the density value
x_dhyper <- seq(0, 22, by = 1.2)
y_dhyper <- dhyper(x_dhyper,  m = 45, n = 30, k = 20)
plot(y_dhyper)
# example 2
# phyper() -> used estimating the number of faults initially resident in a program at the beginning of the test or debugging process based on the hypergeometric distribution and calculate each value in x using the corresponding values.
x_hyper <- seq(0, 22, by = 1)
y_phyper <- phyper(x_hyper, m = 40, n = 20, k = 31)
plot(y_phyper)
# example 3
# qhyper() -> used to specify a sequenct of probabilites btw 0 and 1
x_qhyper <- seq(0, 1, by = 0.02)
y_qhyper <- qhyper(x_qhyper, m = 49, n = 18, k = 30)
plot(y_qhyper)
# example 4
# rhyper() -> generating random numbers function by specifiying a seed and sample size
set.seed(400)
N <- 10000
y_rhyper <- rhyper(N, m = 50, n = 20, k = 30)
hist(y_rhyper, breaks = 50, main = "")
x_dgeom <- seq(2, 10, by= 1)
y_dgeom <- seq(x_dgeom, prob = 0.5)
plot(y_dgeom)
y_dgeom <- seq(x_dgeom, prob = 0.5)
plot(y_dgeom)
x_dgeom <- seq(2, 10, by= 1)
y_dgeom <- seq(x_dgeom, prob = 0.5)
plot(y_dgeom)
y_dgeom <- dgeom(x_dgeom, prob = 0.5)
plot(y_dgeom)
# example 2
x_dgeom <- seq(1, 7, by = 1)
y_dgeom <- dgeom(x_dgeom, prob = 0.05)
plot(y_dgeom)
setwd("~/GitHub/Internship-Files-2023-/week_3/statics from geeks_for_geeks/continuous_distributions")
# example 1
curve(dlnorm(x, meanlog = 0, sdlog = 1), from = 0, to = 25)
# example 2
curve(dlnorm(x), from = 0, to = 25)
# example 3
curve(dlnorm(x, meanlog=0, sdlog=.3), from=0, to=25, col='blue')
curve(dlnorm(x, meanlog=1, sdlog=.5), from=0, to=25, col='red', add=TRUE)
curve(dlnorm(x, meanlog=2, sdlog=1), from=0, to=25, col='purple', add=TRUE)
# example 1
qunif(0.2, min = 0, max = 40)
# example 2
xpos <- seq(min = 0, max = 1, by = 0.02)
ypos <- qunif(xpos, min = 10, max = 100)
plot(ypos)
# example 2
min <- 0
max <- 1
xpos <- seq(min, max , by = 0.02)
ypos <- qunif(xpos, min = 10, max = 100)
plot(ypos)
# probability density function
x <- 5:10
dunif(x, min = 1, max = 20)
# probability density function
min <- 0
max <- 100
xpos <- seq(min, max , by = 0.5)
ypos <- dunif(xpos, min = 10, max = 80)
plot(ypos , type="o")
# cumulative probability distribution
punif(15, min = 0, max = 60, lower.tail = F)
setwd("~/GitHub/Internship-Files-2023-/week_3/statics from geeks_for_geeks")
feeds <- table(chickwts$feed)
barplot(feeds[order(feeds, decreasing = T)])
par(oma = c(1,1,1,1))
par(mar = c(4,5,2,1))
barplot(feeds[order(feeds, decreasing = T)])
barplot(feeds[order(feeds)], horiz = T, xlab = "Number of Chicks", las = 1, col = "pink")
# pie chart
d <- table(chickwts$feed)
pie(d[order(d, decreasing = T)], clockwise = T, main = "Pie Chart")
# histogram
lynx
# histogram
hist(lynx)
hist(lynx, break = 7, col = "purple", main = "histogram")
hist(lynx, break = 7, col = "purple", main = "histogram")
hist(lynx, break=7, col="green",
?hist
hist(lynx, breaks = 7, col = "purple", main = "histogram")
curve(dnorm(x, mean(lynx), sd(lynx), col = "orange", lwd = 2, add = T)
curve(dnorm(x, mean(lynx), sd(lynx), col = "orange", lwd = 2, add = T)
curve(dnorm(x, mean(lynx), sd(lynx), col = "orange", lwd = 2, add = T))
curve(dnorm(x, mean(lynx), sd(lynx)), col = "orange", lwd = 2, add = T)
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)), col = "orange", lwd = 2, add = T)
curve(dnorm(x, mean=mean(lynx),
sd=sd(lynx)), col="red",
lwd=2, add=TRUE)
# box plot
boxplot(USJudgeRatings$RTEN, horizontal=TRUE,
xlab="Lawyers Rating", notch=TRUE,
ylim=c(0, 10), col="pink")
