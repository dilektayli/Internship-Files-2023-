main ="GeeksforGeeks-Article chart")
# Bar Charts
A <- c(17, 32, 8, 53, 1, 13)
B <- c("Jan", "feb", "Mar", "Apr", "May", "Jun")
# Plot the bar chart
barplot(A, names.arg = B, xlab ="Month",
ylab ="Articles", col ="pink",
main ="GeeksforGeeks-Article chart")
# Plot the bar chart
barplot(A, names.arg = B, xlab ="Month",
ylab ="Articles", col ="pink",
main ="Bart")
# example 1
colors = c("green", "orange", "brown")
months <- c("Mar", "Apr", "May", "Jun", "Jul")
regions <- c("East", "West", "North")
# Create the matrix of the values.
Values <- matrix(c(2, 9, 3, 11, 9, 4, 8, 7, 3, 12, 5, 2, 8, 10, 11),
nrow = 3, ncol = 5, byrow = TRUE)
# Create the bar chart
barplot(Values, main = "Total Revenue", names.arg = months,
xlab = "Month", ylab = "Revenue",
col = colors, beside = TRUE)
# Add the legend to the chart
legend("topleft", regions, cex = 0.7, fill = colors)
Values
barplot(Values, main = "Total Revenue", names.arg = months,
xlab = "Month", ylab = "Revenue",
col = colors)
# Add the legend to the chart
legend("topleft", regions, cex = 0.7, fill = colors)
# Histograms
v <- c(19, 23, 11, 5, 16, 21, 32, 14, 19, 27, 39)
hist(v, xlab = "Articles", col = "red", border = "blue")
hist(v, xlab = "Articles", col = "red", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 5)
hist(v, xlab = "Articles", col = "red", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
hist(v, xlab = "Articles", col = "red", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 100), ylim = c(0, 5), breaks = 10)
50
hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 50), ylim = c(0, 50), breaks = 10)
hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
m <- hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
m <- hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
text(m$mids, m$counts, labels = m$counts, adj = c(0.5, -.5))
m <- hist(v, xlab = "Articles", col = "pink", border = "blue", xlim = c(0, 50), ylim = c(0, 5), breaks = 10)
text(m$mids, m$counts, labels = m$counts, adj = c(0.5, -.5))
# histogram using non-uniform width
v <- c(19, 23, 11, 5, 16, 21, 32, 14, 19, 27, 39, 120, 40, 70, 90)
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(50, 100),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(20, 100),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(200, 100),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(20, 100),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(20, 10),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
0
20, 100
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(20, 100),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(20, 10),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(200, 100),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
# histogram using non-uniform width
v <- c(19, 23, 11, 5, 16, 21, 32, 14, 19, 27, 39, 120, 40, 70, 90)
# Creating the histogram.
hist(v, xlab = "Weight", ylab ="Frequency",
xlim = c(50, 100),
col = "darkmagenta", border = "pink",
breaks = c(5, 55, 60, 70, 75,
80, 100, 140))
# Scatter Plots
input <- mtcars[, c("wt", "mpg")]
print(head(input))
plot(x = input$wt, y = input$mpg, xlab = "weight", ylab = "milage", xlim = c(1.5, 4), ylim = c(10, 25), main = "Weight vs Milage" )
# example 1
# 4 variables giving 12 plots
pairs(~wt + mpg + disp + cyl, data = mtcars, main = "Scatter plot matrix")
pairs(~wt + mpg + disp + cyl, data = mtcars, main = "Scatter plot matrix")
# example 1
# 4 variables giving 12 plots
pairs(~wt + mpg + disp + cyl, data = mtcars,
main = "Scatterplot Matrix")
pairs(~wt + mpg + disp + cyl, data = mtcars,
main = "Scatterplot Matrix")
# example 2 - scatter plot with fitted values
install.packages("ggplot2")
library(ggplot2)
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear)))
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear)))
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 1)
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 1)
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 1)
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 1)
# example 2 - scatter plot with fitted values
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 1)
# example 2 - scatter plot with fitted values
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 1)
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 3)
ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 1)
# example 3 - adding title with dynamic name
new_graph <- ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +
geom_point(aes(color = factor(gear))) +
stat_smooth(method = "lm",
col = "darkgreen", se = F, size = 1)
new_graph + labs(
title = "Relation btw Mile per hours and drat",
subtitle = "Relationship break down by gear class"
)
new_graph + labs(
title = "Relation btw Mile per hours and drat",
subtitle = "Relationship break down by gear class",
caption = "hee"
)
new_graph + labs(
title = "Relation btw Mile per hours and drat",
subtitle = "Relationship break down by gear class",
caption = "some caption"
)
# example 4 - 3D scatterplots
install.packages("plotly")
library(plotly)
attach(mtcars)
plot_ly(data = mtcars, x = ~mpg, y = ~hp, z = ~cyl, color = ~gear)
# Pie chart
values <- c(34,54, 22, 25)
labels <- c("A", "B", "C", "D")
pie(values, labels )
# Pie chart
values <- c(34,54, 22, 25)
labels <- c("A", "B", "C", "D")
pie(values, labels )
# Pie chart
values <- c(34,54, 22, 25)
labels <- c("A", "B", "C", "D")
pie(values, labels )
pie(values, labels, main = "Letter pie chart" )
pie(values, labels, main = "Letter pie chart", col = rainbow(length(values))
pie(values, labels, main = "Letter pie chart", col = rainbow(length(values)))
pie(values, labels, main = "Letter pie chart", col = rainbow(length(values)))
# example 1
pie_percent <- round(100*values / sum(values), 1)
?round
pie_percent
# example 1
pie_percent <- round(100*values / sum(values), 1)
pie_percent
# example 1
pie_percent <- round(100*values / sum(values), 3)
pie_percent
# example 1
pie_percent <- round(100*values / sum(values), digits = 1)
legend("topleft", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
pie(values, labels, main = "Letter pie chart", col = rainbow(length(values)))
legend("topleft", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
legend("toprigth", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
legend("topright", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
# example 1
pie_percent <- round(100*values / sum(values), digits = 1)
pie(values, labels, main = "Letter pie chart", col = rainbow(length(values)))
legend("topleft", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
# example 2 - add pie chart color palettes
install.packages("RColorBrewer")
library(RColorBrewer)
labels <- brewer.pal(length(values),"set2")
labels_2 <- c("A", "B", "C", "D")
labels <- brewer.pal(length(values),"set2")
labels <- brewer.pal(length(values),"Set2")
pie(values, labels = labels_2)
# example 3 - modify the line type of the borders of the plot with lty argument
pie(values, labels = labels_2, col = color, lty = 2)
# example 3 - modify the line type of the borders of the plot with lty argument
pie(values, labels = labels_2, lty = 2)
# example 4 - add shading lines with the density argument
pie(values, labels = labels_2, density = 70, angle = 45<
)
# example 4 - add shading lines with the density argument
pie(values, labels = labels_2, density = 70, angle = 45)
# example 4 - add shading lines with the density argument
pie(values, labels = labels_2, density = 70, angle = 45)
# example 4 - add shading lines with the density argument
pie(values, labels = labels_2, col = rainbow(length(values)), density = 60, angle = 45)
# example 4 - add shading lines with the density argument
pie(values, labels = labels_2, col = rainbow(length(values)), density = 60, angle = 45)
# example 5 - 3D pie chart
install.packages("plotrix")
library(plotrix)
pie3D(values, labels = pie_percent, col = rainbow(length(values)))
pie3D(values, labels = pie_percent, col = rainbow(length(values)))
legend("topleft", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
legend("toprigth", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
legend("topright", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
pie3D(values, labels = pie_percent, col = rainbow(length(values)))
legend("topright", c("A","B","C","D"), cex = 0.5, fill = rainbow(length(values)))
# Box plots
input <- mtcars[, c("mpg","cyl")]
input
data(mtcars)
boxplot(disp ~gear, data= mtcars, main = "displacement by gear", xlab = "gear", ylab = "displacement")
# example 1 - boxplot using notch
my_colors <- c("#FFA500", "#008000", "#1E90FF", "#FF1493")
boxplot(disp ~ gear, data = mtcars,
main = "Displacement by Gear", xlab = "Gear", ylab = "Displacement",
col = my_colors, border = "black", notch = TRUE, notchwidth = 0.5,
medcol = "white", whiskcol = "black", boxwex = 0.5, outpch = 19,
outcol = "black")
legend("topright", legend = unique(mtcars$gear),
fill = my_colors, border = "black", title = "Gear")
# example 2 - multiple boxplot
variables <- c("mpg", "disp", "hp", "wt")
par(mfrow = c(1, length(variables)))
for (var in variables) {
boxplot(get(var) ~ gear, data = mtcars,
main = paste("Box Plot of", var),
xlab = "Gear",
ylab = var,
col = "skyblue",
border = "black",
notch = TRUE,
notchwidth = 0.5,
medcol = "white",
whiskcol = "black",
boxwex = 0.5,
outpch = 19,
outcol = "black")
}
# example 2 - multiple boxplot
variables <- c("mpg", "disp", "hp", "wt")
par(mfrow = c(1, length(variables)))
for (var in variables) {
boxplot(get(var) ~ gear, data = mtcars,
main = paste("Box Plot of", var),
xlab = "Gear",
ylab = var,
col = "skyblue",
border = "black",
notch = TRUE,
notchwidth = 0.5,
medcol = "white",
whiskcol = "black",
boxwex = 0.5,
outpch = 19,
outcol = "black")
}
find_and_store_intervals <- function(start, end) {
best_intervals <- list()
stored_data <- list()
for (increment in start:end) {
intervals <- c()
interval_values <- c()
iteration <- start
while (iteration <= end) {
sub_interval <- paste(iteration, iteration + increment - 1, sep = "-")
intervals <- c(intervals, sub_interval)
interval_values <- c(interval_values, iteration)
iteration <- iteration + increment
}
best_intervals[[as.character(increment)]] <- intervals
stored_data[[as.character(increment)]] <- interval_values
}
result <- list(best_intervals = best_intervals, stored_data = stored_data)
return(result)
}
start <- 2
end <- 10
results <- find_and_store_intervals(start, end)
# Accessing the stored_data for the increment 2
results$stored_data[["2"]]
stored_data
results
typeof(results)
find_and_store_intervals <- function(start, end) {
best_intervals <- list()
stored_data <- list()
for (increment in start:end) {
intervals <- c()
interval_values <- c()
iteration <- start
while (iteration <= end) {
sub_interval <- paste(iteration, iteration + increment - 1, sep = "-")
intervals <- c(intervals, sub_interval)
interval_values <- c(interval_values, iteration)
iteration <- iteration + increment
}
best_intervals[[as.character(increment)]] <- intervals
stored_data[[as.character(increment)]] <- interval_values
}
result <- list(best_intervals = best_intervals, stored_data = stored_data)
return(result)
}
start <- 2
end <- 10
results <- find_and_store_intervals(start, end)
# Accessing the stored_data for the increment 2
results$stored_data[["2"]]
find_and_store_intervals <- function(start, end) {
best_intervals <- list()
stored_data <- list()
for (increment in start:end) {
intervals <- c()
interval_values <- c()
iteration <- start
while (iteration <= end) {
sub_interval <- paste(iteration, iteration + increment - 1, sep = "-")
intervals <- c(intervals, sub_interval)
interval_values <- c(interval_values, iteration)
iteration <- iteration + increment
}
best_intervals[[as.character(increment)]] <- intervals
stored_data[[as.character(increment)]] <- interval_values
}
result <- list(best_intervals = best_intervals, stored_data = stored_data)
return(result)
}
start <- 2
end <- 10
results <- find_and_store_intervals(start, end)
# Accessing the stored_data for the increment 2
results$stored_data[["2"]]
source("~/.active-rstudio-document")
find_and_store_intervals <- function(start, end) {
stored_data <- list()
for (increment in start:end) {
intervals <- c()
interval_values <- c()
iteration <- start
while (iteration <= end) {
sub_interval <- paste(iteration, iteration + increment - 1, sep = "-")
intervals <- c(intervals, sub_interval)
interval_values <- c(interval_values, iteration)
iteration <- iteration + increment
}
stored_data[[as.character(increment)]] <- interval_values
}
return(stored_data)
}
start <- 2
end <- 10
stored_data <- find_and_store_intervals(start, end)
# Accessing the stored_data for the increment 2
stored_data[["2"]]
stored_data
sub_interval
as.integer(unlist(stored_data[["2"]]))
typeof(as.integer(unlist(stored_data[["2"]])))
typeof(stored_data[["2"]])
install.packages("ggExtra")
library(shiny)
library(bslib)
library(dplyr)
library(ggplot2)
library(ggExtra)
penguins_csv <- "https://raw.githubusercontent.com/jcheng5/simplepenguins.R/main/penguins.csv"
df <- readr::read_csv(penguins_csv)
# find subset of columns that are suitable for scatter plot
df_num <- df |> select(where(is.numeric), -Year)
ui <- page_sidebar(
theme = bs_theme(bootswatch = "minty"),
sidebar = sidebar(
varSelectInput("xvar", "X variable", df_num, selected = "Bill Length (mm)"),
varSelectInput("yvar", "Y variable", df_num, selected = "Bill Depth (mm)"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(df$Species),
selected = unique(df$Species)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
checkboxInput("show_margins", "Show marginal plots", TRUE),
checkboxInput("smooth", "Add smoother"),
),
plotOutput("scatter")
)
server <- function(input, output, session){
subsetted <- reactive({
req(input$species)
df |> filter(Species %in% input$Species)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if(input$by_species) aes(color = Species),
geom_point(),
if(input$smooth) geom_smooth()
)
if(input$show_margins){
margin_type <- if(input$by_species) "density" else "histogram"
p <- ggExtra :: ggMarginal(p, type = margin_type, margins = "both", size = 8, groupColour = input$by_species, groupFill = input$by_species)
}
p
}, res = 100
)
}
shinyApp(ui, server)
install.packages("ggExtra")
library(shiny)
library(bslib)
library(dplyr)
library(ggplot2)
library(ggExtra)
penguins_csv <- "https://raw.githubusercontent.com/jcheng5/simplepenguins.R/main/penguins.csv"
df <- readr::read_csv(penguins_csv)
# find subset of columns that are suitable for scatter plot
df_num <- df |> select(where(is.numeric), -Year)
ui <- page_sidebar(
theme = bs_theme(bootswatch = "minty"),
sidebar = sidebar(
varSelectInput("xvar", "X variable", df_num, selected = "Bill Length (mm)"),
varSelectInput("yvar", "Y variable", df_num, selected = "Bill Depth (mm)"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(df$Species),
selected = unique(df$Species)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
checkboxInput("show_margins", "Show marginal plots", TRUE),
checkboxInput("smooth", "Add smoother"),
),
plotOutput("scatter")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$species)
df |> filter(Species %in% input$species)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(color = Species),
geom_point(),
if (input$smooth) geom_smooth()
)
if (input$show_margins) {
margin_type <- if (input$by_species) "density" else "histogram"
p <- ggExtra::ggMarginal(p, type = margin_type, margins = "both",
size = 8, groupColour = input$by_species, groupFill = input$by_species)
}
p
}, res = 100)
}
shinyApp(ui, server)
setwd("~/GitHub/pmaa_files/ldl_shiny/ldl_shiny_3")
shiny::runApp()
runApp()
setwd("~/GitHub/Internship-Files-2023-/week_5")
setwd("~/GitHub/Internship-Files-2023-/week_5/shiny")
runApp('stockVis')
setwd("~/GitHub/Internship-Files-2023-/week_5/shiny/stockVis")
runApp()
