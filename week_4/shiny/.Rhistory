intervals <- c(intervals, sub_interval)
interval_values <- c(interval_values, iteration)
iteration <- iteration + increment
}
best_intervals[[as.character(increment)]] <- intervals
stored_data[[as.character(increment)]] <- interval_values
}
result <- list(best_intervals = best_intervals, stored_data = stored_data)
return(result)
}
start <- 2
end <- 10
results <- find_and_store_intervals(start, end)
# Accessing the stored_data for the increment 2
results$stored_data[["2"]]
stored_data
results
typeof(results)
find_and_store_intervals <- function(start, end) {
best_intervals <- list()
stored_data <- list()
for (increment in start:end) {
intervals <- c()
interval_values <- c()
iteration <- start
while (iteration <= end) {
sub_interval <- paste(iteration, iteration + increment - 1, sep = "-")
intervals <- c(intervals, sub_interval)
interval_values <- c(interval_values, iteration)
iteration <- iteration + increment
}
best_intervals[[as.character(increment)]] <- intervals
stored_data[[as.character(increment)]] <- interval_values
}
result <- list(best_intervals = best_intervals, stored_data = stored_data)
return(result)
}
start <- 2
end <- 10
results <- find_and_store_intervals(start, end)
# Accessing the stored_data for the increment 2
results$stored_data[["2"]]
find_and_store_intervals <- function(start, end) {
best_intervals <- list()
stored_data <- list()
for (increment in start:end) {
intervals <- c()
interval_values <- c()
iteration <- start
while (iteration <= end) {
sub_interval <- paste(iteration, iteration + increment - 1, sep = "-")
intervals <- c(intervals, sub_interval)
interval_values <- c(interval_values, iteration)
iteration <- iteration + increment
}
best_intervals[[as.character(increment)]] <- intervals
stored_data[[as.character(increment)]] <- interval_values
}
result <- list(best_intervals = best_intervals, stored_data = stored_data)
return(result)
}
start <- 2
end <- 10
results <- find_and_store_intervals(start, end)
# Accessing the stored_data for the increment 2
results$stored_data[["2"]]
source("~/.active-rstudio-document")
find_and_store_intervals <- function(start, end) {
stored_data <- list()
for (increment in start:end) {
intervals <- c()
interval_values <- c()
iteration <- start
while (iteration <= end) {
sub_interval <- paste(iteration, iteration + increment - 1, sep = "-")
intervals <- c(intervals, sub_interval)
interval_values <- c(interval_values, iteration)
iteration <- iteration + increment
}
stored_data[[as.character(increment)]] <- interval_values
}
return(stored_data)
}
start <- 2
end <- 10
stored_data <- find_and_store_intervals(start, end)
# Accessing the stored_data for the increment 2
stored_data[["2"]]
stored_data
sub_interval
as.integer(unlist(stored_data[["2"]]))
typeof(as.integer(unlist(stored_data[["2"]])))
typeof(stored_data[["2"]])
install.packages("ggExtra")
library(shiny)
library(bslib)
library(dplyr)
library(ggplot2)
library(ggExtra)
penguins_csv <- "https://raw.githubusercontent.com/jcheng5/simplepenguins.R/main/penguins.csv"
df <- readr::read_csv(penguins_csv)
# find subset of columns that are suitable for scatter plot
df_num <- df |> select(where(is.numeric), -Year)
ui <- page_sidebar(
theme = bs_theme(bootswatch = "minty"),
sidebar = sidebar(
varSelectInput("xvar", "X variable", df_num, selected = "Bill Length (mm)"),
varSelectInput("yvar", "Y variable", df_num, selected = "Bill Depth (mm)"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(df$Species),
selected = unique(df$Species)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
checkboxInput("show_margins", "Show marginal plots", TRUE),
checkboxInput("smooth", "Add smoother"),
),
plotOutput("scatter")
)
server <- function(input, output, session){
subsetted <- reactive({
req(input$species)
df |> filter(Species %in% input$Species)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if(input$by_species) aes(color = Species),
geom_point(),
if(input$smooth) geom_smooth()
)
if(input$show_margins){
margin_type <- if(input$by_species) "density" else "histogram"
p <- ggExtra :: ggMarginal(p, type = margin_type, margins = "both", size = 8, groupColour = input$by_species, groupFill = input$by_species)
}
p
}, res = 100
)
}
shinyApp(ui, server)
install.packages("ggExtra")
library(shiny)
library(bslib)
library(dplyr)
library(ggplot2)
library(ggExtra)
penguins_csv <- "https://raw.githubusercontent.com/jcheng5/simplepenguins.R/main/penguins.csv"
df <- readr::read_csv(penguins_csv)
# find subset of columns that are suitable for scatter plot
df_num <- df |> select(where(is.numeric), -Year)
ui <- page_sidebar(
theme = bs_theme(bootswatch = "minty"),
sidebar = sidebar(
varSelectInput("xvar", "X variable", df_num, selected = "Bill Length (mm)"),
varSelectInput("yvar", "Y variable", df_num, selected = "Bill Depth (mm)"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(df$Species),
selected = unique(df$Species)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
checkboxInput("show_margins", "Show marginal plots", TRUE),
checkboxInput("smooth", "Add smoother"),
),
plotOutput("scatter")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$species)
df |> filter(Species %in% input$species)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(color = Species),
geom_point(),
if (input$smooth) geom_smooth()
)
if (input$show_margins) {
margin_type <- if (input$by_species) "density" else "histogram"
p <- ggExtra::ggMarginal(p, type = margin_type, margins = "both",
size = 8, groupColour = input$by_species, groupFill = input$by_species)
}
p
}, res = 100)
}
shinyApp(ui, server)
setwd("~/GitHub/Internship-Files-2023-/week_4/shiny")
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demograhic maps with information from 2010 US Census"),
selectInput(label = "Choose a variable to display", choices = list("Percent White" = 1, "Percent Black" = 2, "Percent Hispanic" = 3, "Percent Asian" = 4)), selected = 1),
sliderInput("slider", min = 0, max = 100, value = c(0, 100)),
mainPanel()
)
)
server <- function(input, output){
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demograhic maps with information from 2010 US Census"),
selectInput(label = "Choose a variable to display", choices = list("Percent White" = 1, "Percent Black" = 2, "Percent Hispanic" = 3, "Percent Asian" = 4)), selected = 1),
sliderInput("slider", min = 0, max = 100, value = c(0, 100)),
mainPanel()
)
)
server <- function(input, output){
}
library(shiny)
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demograhic maps with information from 2010 US Census"),
selectInput(label = "Choose a variable to display", choices = list("Percent White" = 1, "Percent Black" = 2, "Percent Hispanic" = 3, "Percent Asian" = 4)), selected = 1),
sliderInput("slider", min = 0, max = 100, value = c(0, 100)),
mainPanel()
)
)
library(shiny)
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demograhic maps with information from 2010 US Census"),
selectInput(label = "Choose a variable to display", choices = list("Percent White", "Percent Black", "Percent Hispanic", "Percent Asian")), selected = 1),
sliderInput("slider", min = 0, max = 100, value = c(0, 100)),
mainPanel()
)
)
library(shiny)
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demograhic maps with information from 2010 US Census"),
selectInput(label = "Choose a variable to display", choices = list("Percent White", "Percent Black", "Percent Hispanic", "Percent Asian")), selected = "Percent White"),
sliderInput("slider", min = 0, max = 100, value = c(0, 100)),
mainPanel()
)
)
library(shiny)
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demograhic maps with information from 2010 US Census"),
selectInput(label = "Choose a variable to display", choices = list("Percent White", "Percent Black", "Percent Hispanic", "Percent Asian")), selected = "Percent White"),
sliderInput("slider", min = 0, max = 100, value = c(0, 100))
),
mainPanel()
)
library(shiny)
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demograhic maps with information from 2010 US Census"),
selectInput("var", label = "Choose a variable to display", choices = list("Percent White", "Percent Black", "Percent Hispanic", "Percent Asian"), selected = "Percent White"),
sliderInput("range", min = 0, max = 100, value = c(0, 100))
),
mainPanel()
)
)
library(shiny)
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demograhic maps with information from 2010 US Census"),
selectInput("var", label = "Choose a variable to display", choices = list("Percent White", "Percent Black", "Percent Hispanic", "Percent Asian"), selected = "Percent White"),
sliderInput("range",label = "Range of interest" min = 0, max = 100, value = c(0, 100))
library(shiny)
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demograhic maps with information from 2010 US Census"),
selectInput("var", label = "Choose a variable to display", choices = list("Percent White", "Percent Black", "Percent Hispanic", "Percent Asian"), selected = "Percent White"),
sliderInput("range",label = "Range of interest", min = 0, max = 100, value = c(0, 100))
),
mainPanel()
)
)
server <- function(input, output){
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("censusVis"),
br(),
sidebarLayout(
sidebarPanel(
helpText("Create demograhic maps with information from 2010 US Census"),
selectInput("var", label = "Choose a variable to display", choices = list("Percent White", "Percent Black", "Percent Hispanic", "Percent Asian"), selected = "Percent White"),
sliderInput("range",label = "Range of interest", min = 0, max = 100, value = c(0, 100))
),
mainPanel()
)
)
server <- function(input, output){
}
shinyApp(ui, server)
# 2 Steps
# 1. add an R object to your user interface
# 2. tell Shiny how to build the object in the server function. The object will be reactive if the code that builds it calls a widget value.
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText(
"Create demograhic maps with information from the 2010 US Census"
),
selectInput(
"var", label = "Choose a variable to display", choices = c("White", "Black", "Hispanic", "Asian"), selected = "White"
),
sliderInput(
"range", label = "Range of interest:",
min = 0, max = 100, value = c(0, 100)
),
mainPanel("selected_var"),
)
)
)
# 2 Steps
# 1. add an R object to your user interface
# 2. tell Shiny how to build the object in the server function. The object will be reactive if the code that builds it calls a widget value.
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText(
"Create demograhic maps with information from the 2010 US Census"
),
selectInput(
"var", label = "Choose a variable to display", choices = c("White", "Black", "Hispanic", "Asian"), selected = "White"
),
sliderInput(
"range", label = "Range of interest:",
min = 0, max = 100, value = c(0, 100)
),
mainPanel(
textOutput("selected_var")
),
)
)
)
# 2 Steps
# 1. add an R object to your user interface
# 2. tell Shiny how to build the object in the server function. The object will be reactive if the code that builds it calls a widget value.
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText(
"Create demograhic maps with information from the 2010 US Census"
),
selectInput(
"var", label = "Choose a variable to display", choices = c("White", "Black", "Hispanic", "Asian"), selected = "White"
),
sliderInput(
"range", label = "Range of interest:",
min = 0, max = 100, value = c(0, 100)
)
),
mainPanel(
textOutput("selected_var")
)
)
)
server <- function(input, output){
output$selected_var <- renderText({
"You have selected this: "
})
}
shinyApp(ui, server)
# 2 Steps
# 1. add an R object to your user interface
# 2. tell Shiny how to build the object in the server function. The object will be reactive if the code that builds it calls a widget value.
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText(
"Create demograhic maps with information from the 2010 US Census"
),
selectInput(
"var", label = "Choose a variable to display", choices = c("White", "Black", "Hispanic", "Asian"), selected = "White"
),
sliderInput(
"range", label = "Range of interest:",
min = 0, max = 100, value = c(0, 100)
)
),
mainPanel(
textOutput("selected_var")
)
)
)
server <- function(input, output){
output$selected_var <- renderText({
paste("You have selected this: ", input$var)
})
}
shinyApp(ui, server)
# 2 Steps
# 1. add an R object to your user interface
# 2. tell Shiny how to build the object in the server function. The object will be reactive if the code that builds it calls a widget value.
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText(
"Create demograhic maps with information from the 2010 US Census"
),
selectInput(
"var", label = "Choose a variable to display", choices = c("White", "Black", "Hispanic", "Asian"), selected = "White"
),
sliderInput(
"range", label = "Range of interest:",
min = 0, max = 100, value = c(0, 100)
)
),
mainPanel(
textOutput("selected_var")
)
)
)
server <- function(input, output){
output$selected_var <- renderText({
paste("You have selected this: ", input$var)
})
output$range <- renderText({
paste("You have chosen a range that goes from ",input$range)
})
}
shinyApp(ui, server)
# 2 Steps
# 1. add an R object to your user interface
# 2. tell Shiny how to build the object in the server function. The object will be reactive if the code that builds it calls a widget value.
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText(
"Create demograhic maps with information from the 2010 US Census"
),
selectInput(
"var", label = "Choose a variable to display", choices = c("White", "Black", "Hispanic", "Asian"), selected = "White"
),
sliderInput(
"range", label = "Range of interest:",
min = 0, max = 100, value = c(0, 100)
)
),
mainPanel(
textOutput("selected_var"),
textOutput("range")
)
)
)
server <- function(input, output){
output$selected_var <- renderText({
paste("You have selected this: ", input$var)
})
output$range <- renderText({
paste("You have chosen a range that goes from ",input$range)
})
}
shinyApp(ui, server)
# 2 Steps
# 1. add an R object to your user interface
# 2. tell Shiny how to build the object in the server function. The object will be reactive if the code that builds it calls a widget value.
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText(
"Create demograhic maps with information from the 2010 US Census"
),
selectInput(
"var", label = "Choose a variable to display", choices = c("White", "Black", "Hispanic", "Asian"), selected = "White"
),
sliderInput(
"range", label = "Range of interest:",
min = 0, max = 100, value = c(0, 100)
)
),
mainPanel(
textOutput("selected_var"),
textOutput("range")
)
)
)
server <- function(input, output){
output$selected_var <- renderText({
paste("You have selected this: ", input$var)
})
output$range <- renderText({
paste("You have chosen a range that goes from ",input$range[1], "to", input$range[2])
})
}
shinyApp(ui, server)
