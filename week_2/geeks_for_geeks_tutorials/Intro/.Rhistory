# take reactive dependency
df <- eventReactive(input$button, {
head(cars, input$num)
})
output$table <- renderTable({df()})
}
shinyApp(ui,server)
# APP 4
ui = fluidPage(
textInput(inputId = "num",
label = "Enter a numeric value", value = "10"),
actionButton("button", "Calculate"),
column(8, tableOutput("table"))
)
server = function(input, output)
{
# Take an action every time button is pressed
observeEvent(input$button, {
cat("Showing", input$num, "rows\n")
})
df <- eventReactive(input$button, {
head(cars, input$num)
})
output$table <- renderTable({
df()
})
}
shinyApp(ui,server)
# APP 4
# define fluid page layout
ui = fluidPage(
textInput(inputId = "num",
label = "Enter a numeric value", value = "10"),
actionButton("button", "Calculate"),
column(8, tableOutput("table"))
)
server = function(input, output)
{
# Take an action every time button is pressed
observeEvent(input$button, {
cat("Showing", input$num, "rows\n")
})
# Take a reactive dependency
# on input$num, but not on any
# of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$num)
})
output$table <- renderTable({
df()
})
}
shinyApp(ui, server)
runApp('packages.R')
install.packages("dplyr")
ui = fluidPage(
textInput(inputId = "num",
label = "Enter a numeric value", value = "10"),
actionButton("button", "Calculate"),
column(8, tableOutput("table"))
)
server = function(input, output)
{
# Take an action every time button is pressed
observeEvent(input$button, {
cat("Showing", input$num, "rows\n")
})
# Take a reactive dependency
# on input$num, but not on any
# of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$num)
})
output$table <- renderTable({
df()
})
}
shinyApp(ui, server)
# Define fluid page layout
ui <- fluidPage(
textInput(inputId = "num",
label = "Enter a numeric value", value = "10"),
actionButton("button", "Calculate"),
column(8, tableOutput("table"))
)
server <- function(input, output) {
# Take an action every time button is pressed
observeEvent(input$button, {
num_rows <- as.numeric(input$num) # Convert input$num to numeric
if (!is.na(num_rows) && is.numeric(num_rows) && num_rows > 0) {
cat("Showing", num_rows, "rows\n")
} else {
cat("Invalid input for 'num'. Please enter a valid positive numeric value.\n")
}
})
# Take a reactive dependency
# on input$num, but not on any
# of the stuff inside the function
df <- eventReactive(input$button, {
num_rows <- as.numeric(input$num) # Convert input$num to numeric
if (!is.na(num_rows) && is.numeric(num_rows) && num_rows > 0) {
head(cars, num_rows)
} else {
NULL
}
})
output$table <- renderTable({
df()
})
}
shinyApp(ui, server)
# define fluid page layout
ui = fluidPage(
textInput(inputId = "num",
label = "Enter a numeric value", value = "10"),
actionButton("button", "Calculate"),
column(8, tableOutput("table"))
)
server = function(input, output)
{
# Take an action every time button is pressed
observeEvent(input$button, {
cat("Showing", input$num, "rows\n")
})
df <- eventReactive(input$button, {
head(cars, input$num)
})
output$table <- renderTable({
df()
})
}
shinyApp(ui, server)
# Load necessary library
library(shiny)
# Define fluid page layout
ui <- fluidPage(
textInput(inputId = "num",
label = "Enter a numeric value", value = "10"),
actionButton("button", "Calculate"),
column(8, tableOutput("table"))
)
server <- function(input, output) {
# Take an action every time button is pressed
observeEvent(input$button, {
num_rows <- as.numeric(input$num) # Convert input$num to numeric
if (!is.na(num_rows) && is.numeric(num_rows) && num_rows > 0) {
cat("Showing", num_rows, "rows\n")
} else {
cat("Invalid input for 'num'. Please enter a valid positive numeric value.\n")
}
})
# Take a reactive dependency
# on input$num, but not on any
# of the stuff inside the function
df <- eventReactive(input$button, {
num_rows <- as.numeric(input$num) # Convert input$num to numeric
if (!is.na(num_rows) && is.numeric(num_rows) && num_rows > 0) {
head(cars, num_rows)
} else {
NULL
}
})
output$table <- renderTable({
df()
})
}
shinyApp(ui, server)
# APP 5
ui <- fluidPage(sliderInput(
inputId = "num",
label = "choose a number",
value = 25,
min = 1,
max = 100),
actionButton(
inputId = "go",
label = "update"),
plotOutput("hist")
)
output$hist <- renderPlot({hist(data())})
server <- eventReactive(input, output){
server <- eventReactive(input, output){
server <- eventReactive(input, output){
server <- eventReactive(input, output){
server <- function(input, output)
{
data <- eventReactive(input$go, {
rnorm(input$num)
})
output$hist <- renderPlot({
hist(data())
})
}
shinyApp(ui, server)
# APP 6
ui <- fluidPage(
sliderInput("obs","number of observations", 0,1000, 500)
actionButton("goButton","Go", class="btn-success"),
dist <- isolate(rnorm(input$obs))
server <- function(input, output){
output$disPlot <- renderPlot({
input$goButton
dist <- isolate(rnorm(input$obs))
})
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("obs","number of observations", 0,1000, 500),
actionButton("goButton","Go", class="btn-success"),
plotOutput("distPlot")
)
server <- function(input, output){
output$disPlot <- renderPlot({
input$goButton
dist <- isolate(rnorm(input$obs))
})
}
shinyApp(ui, server)
hist(dist)
ui <- fluidPage(
sliderInput("obs","number of observations", 0,1000, 500),
actionButton("goButton","Go", class="btn-success"),
plotOutput("distPlot")
)
server <- function(input, output){
output$disPlot <- renderPlot({
input$goButton
dist <- isolate(rnorm(input$obs))
hist(dist)
})
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("obs", "Number of observations", 0, 1000, 500),
actionButton("goButton", "Go!", class = "btn-success"),
plotOutput("distPlot")
)
server <- function(input, output)
{
output$distPlot <- renderPlot({
input$goButton
dist <- isolate(rnorm(input$obs))
hist(dist)
})
}
shinyApp(ui, server)
# APP 7
ui <- fluidPage(
checkboxGroupInput(
"icons","choose icons: ",
choiceNames = list(icon("dog"), icon("cat"), icon("fish"),icon("bug"))
)
)
# APP 7
ui <- fluidPage(
checkboxGroupInput(
"icons","choose icons: ",
choiceNames = list(icon("dog"), icon("cat"), icon("fish"),icon("bug")),
choiceValues = list("dog", "cat","fish","bug")),
textOutput("txt")
)
server <- function(input, output, session){
output$txt <- renderText({
icons <- paste(input$icons, collapse = ", ")
paste("you choose",icons)
})
}
shinyApp(ui, server)
# APP 8
ui <- fluidPage(
textInput("txt","Enter your text","Empty"),
verbatimTextOutput("value")
)
output$value <- renderText({input$text})
server <- function(input, output){
output$value <- renderText({input$text})
}
shinyApp(ui, server)
ui <- fluidPage(
textInput("txt","Enter your text","Empty"),
verbatimTextOutput("value")
)
server <- function(input, output){
output$value <- renderText({ input$text })
}
shinyApp(ui, server)
# APP 8
ui <- fluidPage(
textInput("txt","Enter your text","Empty"),
verbatimTextOutput("value")
)
server <- function(input, output){
output$value <- renderText({ input$text })
}
shinyApp(ui, server)
# APP 8
ui <- fluidPage(
textInput("txt","Enter your text","Empty"),
verbatimTextOutput("value")
)
server <- function(input, output){
output$value <- renderText({ input$text })
}
shinyApp(ui, server)
# APP 8
ui <- fluidPage(
textInput("txt","Enter your text","Empty"),
verbatimTextOutput("value")
)
print(verbatimTextOutput)
server <- function(input, output){
output$value <- renderText({ input$text })
}
shinyApp(ui, server)
# APP 8
ui <- fluidPage(
textInput("txt", "Enter your text here", "Empty"),
verbatimTextOutput("value")
)
server <- function(input, output)
{
output$value <- renderText({ input$text })
}
shinyApp(ui, server)
# APP 9
ui <- fluidPage(
textInput(inputId = "name",label = "enter your name"),
textOutput("txt")
)
install.packages("readr")
install.packages("readr")
server <- function(input, output, session){
output$txt <- renderText({
name <- paste(input$name, collapse = ", ")
paste("Welcome ", name)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
# APP 9
ui <- fluidPage(
textInput(inputId = "name",label = "enter your name"),
textOutput("txt")
)
server <- function(input, output, session){
output$txt <- renderText({
name <- paste(input$name, collapse = ", ")
paste("Welcome ", name)
})
}
shinyApp(ui, server)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
library(shiny)
# APP 9
ui <- fluidPage(
textInput(inputId = "name",label = "enter your name"),
textOutput("txt")
)
server <- function(input, output, session){
output$txt <- renderText({
name <- paste(input$name, collapse = ", ")
paste("Welcome ", name)
})
}
shinyApp(ui, server)
# APP 10
ui <- fluidPage(
sliderInput(
inputId = "num",
label = "choose a number",
value = 25,
min = 1,
max = 22),
wellPanel(plotOutput("hist"))
)
# APP 10
ui <- fluidPage(
sliderInput(
inputId = "num",
label = "choose a number",
value = 25,
min = 1,
max = 22),
wellPanel(plotOutput("hist"))
)
# APP 10
ui <- fluidPage(
sliderInput(
inputId = "num",
label = "choose a number",
value = 10,
min = 1,
max = 22),
wellPanel(plotOutput("hist"))
)
server <- function(input, output){
output$hist <- renderPlot({
hist(rnorm(input$num), main = input$title)
})
}
shinyApp(ui, server)
# TIDYR PACKAGE -> creating tidy data
install.packages("tidyverse")
library(tidyverse)
n <* 10
n <- 10
tidy_dataframe = data.frame(
S.No = c(1:n),
Group.1 = c(23, 345, 76, 212, 88,
199, 72, 35, 90, 265),
Group.2 = c(117, 89, 66, 334, 90,
101, 178, 233, 45, 200),
Group.3 = c(29, 101, 239, 289, 176,
320, 89, 109, 199, 56))
tidy_dataframe
long <- tidy_dataframe %>%
gather(Group, Frequency, Group.1:Group.3)
long
long <- tidy_dataframe %>%
gather(Group, Group.1:Group.3)
long <- tidy_dataframe %>%
gather(Group, Frequency, Group.1:Group.3)
long
separate_data <- long %>%
separate(Group, c("Allotment","Number"))
separate_data
unite_data <- separate_data %>%
unite(Group, Allotment, Number, sep = ".")
unite_data
united_data <- separate_data %>%
unite(Group, Allotment, Number, sep = ".")
united_data
back_to_wide <- unite_data %>%
spread(Group, Frequency)
back_to_wide
df <- tidy_dataframe
df %>% nest(data = c(Group.1))
df
#unnest() funciton
df %>% unnest(data = c(Group.1))
df %>% unnest(data = c(Group.1))
names(iris)
df <- iris
names(iris)
# nest() function ->  It creates a list of data frames containing all the nested variables. Nesting is implicitly a summarizing operation.
head(df %>% nest(data = c(Species)))
#unnest() funciton
head(df %>% unnest(Species, drop = NA, .preserve = NULL))
#unnest() funciton
head(df %>% unnest(Species, drop = NA, .preserve = NULL))
#unnest() funciton
head(df %>% unnest(Species, .drop = NA, .preserve = NULL))
#unnest() funciton
head(df %>% unnest(Species, .drop = NA, .preserve = NULL))
head(df %>% unnest(Species))
df <- data.frame(Month <- 1:6, Year = c(2000, rep(NA,5)))
df
df %>% fill(Year)
num_vec <- c(1,3,5,6,3,22)
full_seq(num_vec,1)
num_vec <- c(1,3,5,6,3,22)
full_seq(num_vec,7)
1
df <- tibble(S.No <- c(1:10), Name <- c("john","sunny","luke","king","tay",rep(NA,5) ))
df
df %>% drop_na(Name)
df <- tibble(S.No <- c(1:10), Name <- c("john","sunny","luke","king","tay",rep(NA,5) ))
df %>% drop_na(Name)
df
df <- tibble(S.No = 1:10, Name = c("john", "sunny", "luke", "king", "tay", rep(NA, 5)))
df %>% drop_na(Name)
# drop NA values
df <- tibble(S.No = 1:10, Name = c("john", "sunny", "luke", "king", "tay", rep(NA, 5)))
# replace_na()
df %>% replace_na(list(Name = "Ali Cabbar"))
# load the library
library("ggplot2")
# create the dataframe with letters and numbers
gfg < -data.frame(
x=c('A', 'B', 'C', 'D', 'E', 'F'),
y=c(4, 6, 2, 9, 7, 3))
# load the library
library("ggplot2")
# create the dataframe with letters and numbers
gfg < -data.frame(
x=c('A', 'B', 'C', 'D', 'E', 'F'),
y=c(4, 6, 2, 9, 7, 3))
# create the dataframe with letters and numbers
gfg < -data.frame( x <- c('A', 'B', 'C', 'D', 'E', 'F'), y <- c(4, 6, 2, 9, 7, 3))
# load the library
library("ggplot2")
# create the dataframe with letters and numbers
gfg < -data.frame( x <- c('A', 'B', 'C', 'D', 'E', 'F'), y <- c(4, 6, 2, 9, 7, 3))
# load the library
library("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
# create the dataframe with letters and numbers
gfg < -data.frame( x <- c('A', 'B', 'C', 'D', 'E', 'F'), y <- c(4, 6, 2, 9, 7, 3))
# create the dataframe with letters and numbers
gfg <- data.frame(
x = c('A', 'B', 'C', 'D', 'E', 'F'),
y = c(4, 6, 2, 9, 7, 3)
)
# display the bar
ggplot(gfg, aes(x, y, fill=x)) + geom_bar(stat="identity")
