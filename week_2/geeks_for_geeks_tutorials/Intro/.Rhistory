a <- 10
b <- function()
{
c <- 11
c(a, c)
}
b()
a <- 10
b()
b()
c(a, c)
c(a, c)
a <- function(x) 10 * x
b <- function(){
a <- function(x) x + 10
a(12)
}
b()
a(12)
setwd("~/GitHub/Internship-Files-2023-/week_2/geeks_for_geeks_tutorials/Intro")
var = readline();
print(var)
var = readline();
var = as.integer(var);
print(var)
# getting input from keyboard
var = readline("Enter any number");
print(var)
3
var2 = readline("Enter 2nd number")
{
var1 = readline("Enter 1st number")
var2 = readline("Enter 2nd number")
var3 = readline("Enter 3rd number")
}
var1 = as.integer(var1)
var2 = as.integer(var2)
var3 = as.integer(var3)
print(var1 + var2 + var3)
# get string from keyboard
var1 <- readline("Enter your name: ")
var2 <- readline("Enter a character: F/M")
f
var2 <- readline("Enter a character: F/M: ")
var2 <- as.character(var2)
# Getting input from keyboard with scan() method
x = scan()
print(x)
x = scan()
print(x)
# Getting input from keyboard with scan() method
x <- scan()
x
# Getting input from keyboard with scan() method
x <- scan()
print(x)
# Getting input from keyboard with scan() method
x <- scan()
x = scan(what = double()) # for double
x
x = scan(what = "") # for string
x
x = scan(what = character())# for character
x
double_x = scan(what = double()) # for double
as
# printing output of an R Program
print("xx")
print(paste(x, "is the best reaction"))
# paste() method to print output with string and variable together.
x <- "waooowww"
print(paste(x, "is the best reaction"))
print(paste0(x, "is best (paste0 inside print())"))
x <- "trying"
sprintf("%s is the best", x)
x <- 1
sprintf("%d is integer", x)
x <- 2.3
sprintf("%f is a float", x)
sprintf("%.3f is a float", x)
# cat() method
x <- "some text"
cat(x, " aaaaaa")
# message() method
message(x, " bbbbbbbbb")
# Write output to a file
write.table(x, file = "new.txt")
# sprintf() method
x <- "trying"
write.table(x, file = "new.txt")
write.table(var1, file = "new.txt")
write.table(var1, file = "new.txt")
# print() method
x <- cars[1:5, ]
print(X)
print(x)
print(x, digits = 2)
x <- 9/4
print(x, digits = 2)
print(x = 2/7, digits = 4)
print(x = 7/2, digits = 4)
print(x = 7/3, digits = 4)
x <- matrix(c(2, NA, 5, 9, NA, 32, 43), nrow = 2, byrow = TRUE)
print(x, na.print = "")
x <- letters[4: 10]
for(i in x) print(X)
for(i in x) print(x)
print()
x <- letters[4: 10]
for(i in x){
print(x)
}
x <- letters[4:10]
for(i in x){
print(x)
}
print(i)
x <- letters[4:10]
for(i in x){
print(i)
}
m <- matrix(2: 15, 3)
m <- matrix(2: 15, 3)
for (x in seq(nrow(m))) {
for(y in seq(ncol(m))){
print(m[x,y])
}
}
m <- matrix(2: 15, 2)
for (x in seq(nrow(m))) {
for(y in seq(ncol(m))){
print(m[x,y])
}
}
x <- 1
x++
}
x++
x <- 1
x <- 1
while(x <= 5){
print(x)
x++
}
x <- x + 1
x <- 1
while(x <= 5){
print(x)
x <- x + 1
}
# repeat loop
x <- 1
print(x)
x <- 1
repeat{
print(x)
x <- x + 1
if(x > 4)
break
}
return() expression
func(0)
func <- function(x){
if(x>0)
return("positive")
if(x<0)
return("negative")
else
return("zero")
}
func(0)
func(1)
# next statement
x <- 1:10
x <- 1:10
for(i in x){
if( i %% 2 != 0)
next
print(i, " is even number")
}
# next statement
x <- 1:10
for(i in x){
if( i %% 2 != 0)
next
print(paste(i, " is even number"))
}
x <- switch(
2,           # Expression
"Geeks1",    # case 1
"for",       # case 2
"Geeks2"     # case 3
)
print(x)
x <- switch(
2,           # Expression
"Geeks1",    # case 1
"for",       # case 2
"Geeks2"     # case 3
)
print(x)
x <- switch(
2,           # Expression
"Geeks1",    # case 1
"for",       # case 2
"Geeks2"     # case 3
)
print(x)
# Expression in terms of the string value
y <- switch(
"GfG3",              # Expression
"GfG0"="Geeks1",     # case 1
"GfG1"="for",        # case 2
"GfG3"="Geeks2"      # case 3
)
print(y)
z <- switch(
"GfG",               # Expression
"GfG0"="Geeks1",     # case 1
"GfG1"="for",        # case 2
"GfG3"="Geeks2"      # case 3
)
print(z)
val <- switch(
4,
"Geeks1",
"Geeks2",
"Geeks3",
"Geeks4",
"Geeks5",
"Geeks6"
)
print(val)
val1 = 6
val2 = 7
val3 = "s"
result = switch(
val3,
"a"= cat("Addition =", val1 + val2),
"d"= cat("Subtraction =", val1 - val2),
"r"= cat("Division = ", val1 / val2),
"s"= cat("Multiplication =", val1 * val2),
"m"= cat("Modulus =", val1 %% val2),
"p"= cat("Power =", val1 ^ val2)
)
print(result)
val1 = 6
val2 = 7
val3 = "s"
result = switch(
val3,
"a"= cat("Addition =", val1 + val2),
"d"= cat("Subtraction =", val1 - val2),
"r"= cat("Division = ", val1 / val2),
"s"= cat("Multiplication =", val1 * val2),
"m"= cat("Modulus =", val1 %% val2),
"p"= cat("Power =", val1 ^ val2)
)
print(result)
{
print(i)
}
# FOR LOOP
for (i in c(-8, 9, 11, 45))
for (i in c(-8, 9, 11, 45))
{
print(i)
}
# FOR LOOP
for (i in c(-8, 9, 11, 45))
{
print(i)
}
for (i in c(3, 6, 23, 19, 0, 21))
{
if (i == 0)
{
break
}
print(i)
}
print("Outside Loop")
# next statement
for (i in c(3, 6, 23, 19, 0, 21))
{
if (i == 0)
{
next
}
print(i)
}
mat <- matrix(rnorm(100), ncol = 5)
View(mat)
par(nfrow = c(2, 3))
par(nfrow = c(2, 3)) # set up the plot layout
hist(mat[,i],  = paste("Column", i), xlab = "Values", col = "lightblue")
hist(mat[,i], paste("Column", i), xlab = "Values", col = "lightblue")
hist(mat[,i], main = paste("Column", i), xlab = "Values", col = "lightblue")
mat <- matrix(rnorm(100), ncol = 5) # data matrix
par(nfrow = c(2, 3)) # set up the plot layout
for(i in 1:5){
hist(mat[ ,i], main = paste("Column", i), xlab = "Values", col = "lightblue")
}
# creating multiple plots within for loop
mat <- matrix(rnorm(100), ncol = 5) # data matrix
par(nfrow = c(2, 3)) # set up the plot layout
for(i in 1:5){
hist(mat[ ,i], main = paste("Column", i), xlab = "Values", col = "lightblue")
}
print(even_odd(5))
even_odd <- function(x){
if(x %% 2 == 0)
return("even")
else
return("odd")
}
print(even_odd(5))
perimeter <- 2 * (length + width)
rectangle <- function(length, width){
area <- length * width
perimeter <- 2 * (length + width)
result <- list("Area" = area, "Perimeter" = perimeter)
}
want <- rectangle(2,3)
print(want)
print(want["Area"])
'%Greater%' <- function(a, b)
{
if(a > b) print(a)
else if(b > a) print(b)
else print("equal")
}
5 %Greater% 7
2300 %Greater% 67
"replace<-" <- function(x, value)
{
x[1] = value
x
}
x = rep.int(5, 7)
replace(x) = 0L
print(x)
# Vectors(ordered collection of same data type)
X = c(1, 3, 5, 7, 8)
empId = c(1, 2, 3, 4)
# lists(collection of vectors, variables, etc)
emp_list <- list(empId, X)
emp_list
Name = c("Amiya", "Raj", "Asish")
Language = c("R", "Python", "Java")
Age = c(22, 25, 45)
df = data.frame(Name, Language, Age)
df
# Matrices ( two-dimensional, homogeneous data structures)
A <-  matrix(
c(1, 2, 3, 4, 5, 6, 7, 8, 9),
nrow = 3, ncol = 3,
byrow = TRUE
)
A
A = array(
c(1, 2, 3, 4, 5, 6, 7, 8),
dim = c(2, 2, 2)
)
A
fac = factor(c("Male", "Female", "Male",
"Male", "Female", "Male", "Female"))
fac
X<- c(2, 5, 18, 1, 12)
cat('Using Subscript operator', X[2], '\n')
cat('Using Subscript operator', X[c(3,2)], '\n')
emp_list
empId = c(1, 2, 3, 4)
empName = c("Debi", "Sandeep", "Subham", "Shiba")
numberOfEmp = 4
empList = list(
"ID" = empId,
"Names" = empName,
"Total Staff" = numberOfEmp
)
empList
print(empList[[2]])
print(empList[[2]][2])
lst <- list(1:5)
print(lst)
vec <- unlist(lst)
vec
lst
lst <- list(1:5)
lst
mat <- matrix(unlist(lst), nrow = 2, byrow = TRUE)
mat
row_names <- c("row1", "row2")
col_names <- c("col1", "col2", "col3")
mat_names <- c("Mat1", "Mat2")
arr = array(2:14, dim = c(2, 3, 2),
dimnames = list(row_names,
col_names, mat_names))
arr
matrix
A
A <-  matrix(
c(1, 2, 3, 4, 5, 6, 7, 8, 9),
nrow = 3, ncol = 3,
byrow = TRUE
)
A
row_names <- c("row1", "row2")
col_names <- c("col1", "col2", "col3")
mat_names <- c("Mat1", "Mat2")
arr = array(2:14, dim = c(2, 3, 2),
dimnames = list(row_names,
col_names, mat_names))
arr
print (arr[,,1])
print(arr[,,"Mat2"])
print (arr[, c(2, 3), 1])
print (arr[, c(2, 3), 1])
print(diag(c(5, 3, 3), 3, 3))
print(diag(1, 3, 3)) # identity matrix
A = matrix(
c(1, 2, 3, 4, 5, 6, 7, 8, 9),
nrow = 3,
ncol = 3,
byrow = TRUE
)
B = matrix(
c(10, 11, 12),
nrow = 1,
ncol = 3
)
C = rbind(A, B)
C
C = cbind(A, B) # column-based
gender <- factor(c("female", "male", "male", "female"),
levels = c("female", "transgender", "male"));
gender <- factor(c("female", "male", "male", "female"), levels = c("female", "transgender", "male"));
gender <- factor(c("female", "male", "male", "female"), levels = c("female", "transgender", "male"))
gender <- factor(c("female", "male", "male", "female"), levels = c("female", "transgender", "male"))
gender
gender[1]
gender
gender[2]
gender[12]
levels(gender) <- c(levels(gender), "other")
summary(df)
df$Name
df <- subset(df, df$Name = "Raj")
df <- subset(df, df$Name != "Raj")
df
df <- select(df, -Age)
df <- select(df, -Age)
